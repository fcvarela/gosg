// Code generated by protoc-gen-go.
// source: state.proto
// DO NOT EDIT!

package protos

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type State_Cullface int32

const (
	State_CULL_BACK  State_Cullface = 0
	State_CULL_FRONT State_Cullface = 1
	State_CULL_BOTH  State_Cullface = 2
)

var State_Cullface_name = map[int32]string{
	0: "CULL_BACK",
	1: "CULL_FRONT",
	2: "CULL_BOTH",
}
var State_Cullface_value = map[string]int32{
	"CULL_BACK":  0,
	"CULL_FRONT": 1,
	"CULL_BOTH":  2,
}

func (x State_Cullface) String() string {
	return proto.EnumName(State_Cullface_name, int32(x))
}
func (State_Cullface) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{0, 0} }

type State_BlendMode int32

const (
	State_BLEND_SRC_ALPHA           State_BlendMode = 0
	State_BLEND_ONE_MINUS_SRC_ALPHA State_BlendMode = 1
	State_BLEND_ONE                 State_BlendMode = 2
)

var State_BlendMode_name = map[int32]string{
	0: "BLEND_SRC_ALPHA",
	1: "BLEND_ONE_MINUS_SRC_ALPHA",
	2: "BLEND_ONE",
}
var State_BlendMode_value = map[string]int32{
	"BLEND_SRC_ALPHA":           0,
	"BLEND_ONE_MINUS_SRC_ALPHA": 1,
	"BLEND_ONE":                 2,
}

func (x State_BlendMode) String() string {
	return proto.EnumName(State_BlendMode_name, int32(x))
}
func (State_BlendMode) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{0, 1} }

type State_BlendEquation int32

const (
	State_BLEND_FUNC_ADD State_BlendEquation = 0
	State_BLEND_FUNC_MAX State_BlendEquation = 1
)

var State_BlendEquation_name = map[int32]string{
	0: "BLEND_FUNC_ADD",
	1: "BLEND_FUNC_MAX",
}
var State_BlendEquation_value = map[string]int32{
	"BLEND_FUNC_ADD": 0,
	"BLEND_FUNC_MAX": 1,
}

func (x State_BlendEquation) String() string {
	return proto.EnumName(State_BlendEquation_name, int32(x))
}
func (State_BlendEquation) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{0, 2} }

type State_DepthFunc int32

const (
	State_DEPTH_LESS_EQUAL State_DepthFunc = 0
	State_DEPTH_LESS       State_DepthFunc = 1
	State_DEPTH_EQUAL      State_DepthFunc = 2
)

var State_DepthFunc_name = map[int32]string{
	0: "DEPTH_LESS_EQUAL",
	1: "DEPTH_LESS",
	2: "DEPTH_EQUAL",
}
var State_DepthFunc_value = map[string]int32{
	"DEPTH_LESS_EQUAL": 0,
	"DEPTH_LESS":       1,
	"DEPTH_EQUAL":      2,
}

func (x State_DepthFunc) String() string {
	return proto.EnumName(State_DepthFunc_name, int32(x))
}
func (State_DepthFunc) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{0, 3} }

type State struct {
	Name          string              `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	ProgramName   string              `protobuf:"bytes,2,opt,name=programName" json:"programName,omitempty"`
	Culling       bool                `protobuf:"varint,3,opt,name=culling" json:"culling,omitempty"`
	CullFace      State_Cullface      `protobuf:"varint,4,opt,name=cullFace,enum=protos.State_Cullface" json:"cullFace,omitempty"`
	Blending      bool                `protobuf:"varint,5,opt,name=blending" json:"blending,omitempty"`
	BlendSrcMode  State_BlendMode     `protobuf:"varint,6,opt,name=blend_src_mode,json=blendSrcMode,enum=protos.State_BlendMode" json:"blend_src_mode,omitempty"`
	BlendDstMode  State_BlendMode     `protobuf:"varint,7,opt,name=blend_dst_mode,json=blendDstMode,enum=protos.State_BlendMode" json:"blend_dst_mode,omitempty"`
	BlendEquation State_BlendEquation `protobuf:"varint,8,opt,name=blend_equation,json=blendEquation,enum=protos.State_BlendEquation" json:"blend_equation,omitempty"`
	DepthTest     bool                `protobuf:"varint,9,opt,name=depth_test,json=depthTest" json:"depth_test,omitempty"`
	DepthWrite    bool                `protobuf:"varint,10,opt,name=depth_write,json=depthWrite" json:"depth_write,omitempty"`
	DepthFunc     State_DepthFunc     `protobuf:"varint,11,opt,name=depth_func,json=depthFunc,enum=protos.State_DepthFunc" json:"depth_func,omitempty"`
	ColorWrite    bool                `protobuf:"varint,12,opt,name=color_write,json=colorWrite" json:"color_write,omitempty"`
	ScissorTest   bool                `protobuf:"varint,13,opt,name=scissor_test,json=scissorTest" json:"scissor_test,omitempty"`
}

func (m *State) Reset()                    { *m = State{} }
func (m *State) String() string            { return proto.CompactTextString(m) }
func (*State) ProtoMessage()               {}
func (*State) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func init() {
	proto.RegisterType((*State)(nil), "protos.State")
	proto.RegisterEnum("protos.State_Cullface", State_Cullface_name, State_Cullface_value)
	proto.RegisterEnum("protos.State_BlendMode", State_BlendMode_name, State_BlendMode_value)
	proto.RegisterEnum("protos.State_BlendEquation", State_BlendEquation_name, State_BlendEquation_value)
	proto.RegisterEnum("protos.State_DepthFunc", State_DepthFunc_name, State_DepthFunc_value)
}

func init() { proto.RegisterFile("state.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 466 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x53, 0xcf, 0x8f, 0xd2, 0x4e,
	0x14, 0xa7, 0x7c, 0x77, 0x59, 0xfa, 0x0a, 0x6c, 0xf3, 0xbe, 0x46, 0xab, 0x66, 0x23, 0xf6, 0xc4,
	0x89, 0xc3, 0x9a, 0xa8, 0x17, 0x0f, 0xfd, 0x45, 0x30, 0x96, 0xb2, 0xb6, 0x10, 0xbd, 0x4d, 0x4a,
	0x3b, 0xbb, 0x92, 0x94, 0x16, 0x3b, 0xd3, 0xf8, 0x4f, 0xf9, 0x47, 0x9a, 0x99, 0x81, 0xc2, 0x9a,
	0x3d, 0x78, 0xe2, 0x7d, 0x7e, 0xce, 0xcc, 0x23, 0x05, 0x83, 0xf1, 0x94, 0xd3, 0xe9, 0xbe, 0xae,
	0x78, 0x85, 0x3d, 0xf9, 0xc3, 0xec, 0xdf, 0x3d, 0xb8, 0x4c, 0x04, 0x8f, 0x08, 0x17, 0x65, 0xba,
	0xa3, 0x96, 0x36, 0xd6, 0x26, 0x7a, 0x2c, 0x67, 0x1c, 0x83, 0xb1, 0xaf, 0xab, 0x87, 0x3a, 0xdd,
	0x45, 0x42, 0xea, 0x4a, 0xe9, 0x9c, 0x42, 0x0b, 0xae, 0xb2, 0xa6, 0x28, 0xb6, 0xe5, 0x83, 0xf5,
	0xdf, 0x58, 0x9b, 0xf4, 0xe3, 0x23, 0xc4, 0x5b, 0xe8, 0x8b, 0x71, 0x96, 0x66, 0xd4, 0xba, 0x18,
	0x6b, 0x93, 0xd1, 0xed, 0x73, 0x75, 0x36, 0x9b, 0xca, 0x03, 0xa7, 0x5e, 0x53, 0x14, 0xf7, 0x69,
	0x46, 0xe3, 0xd6, 0x87, 0xaf, 0xa0, 0xbf, 0x29, 0x68, 0x99, 0x8b, 0xba, 0x4b, 0x59, 0xd7, 0x62,
	0xfc, 0x04, 0x23, 0x39, 0x13, 0x56, 0x67, 0x64, 0x57, 0xe5, 0xd4, 0xea, 0xc9, 0xd6, 0x17, 0x8f,
	0x5b, 0x5d, 0xe1, 0x59, 0x54, 0x39, 0x8d, 0x07, 0xd2, 0x9e, 0xd4, 0x99, 0x40, 0xa7, 0x78, 0xce,
	0xb8, 0x8a, 0x5f, 0xfd, 0x4b, 0xdc, 0x67, 0x5c, 0xc6, 0xdd, 0x63, 0x9c, 0xfe, 0x6c, 0x52, 0xbe,
	0xad, 0x4a, 0xab, 0x2f, 0xe3, 0xaf, 0x9f, 0x88, 0x07, 0x07, 0x4b, 0x3c, 0xdc, 0x9c, 0x43, 0xbc,
	0x01, 0xc8, 0xe9, 0x9e, 0xff, 0x20, 0x9c, 0x32, 0x6e, 0xe9, 0xf2, 0x7d, 0xba, 0x64, 0x56, 0x94,
	0x71, 0x7c, 0x03, 0x86, 0x92, 0x7f, 0xd5, 0x5b, 0x4e, 0x2d, 0x90, 0xba, 0x4a, 0x7c, 0x13, 0x0c,
	0xbe, 0x3f, 0xe6, 0xef, 0x9b, 0x32, 0xb3, 0x8c, 0xa7, 0xae, 0xef, 0x0b, 0x7d, 0xd6, 0x94, 0xd9,
	0xa1, 0x58, 0x8c, 0xa2, 0x38, 0xab, 0x8a, 0xaa, 0x3e, 0x14, 0x0f, 0x54, 0xb1, 0xa4, 0x54, 0xf1,
	0x5b, 0x18, 0xb0, 0x6c, 0xcb, 0x58, 0x55, 0xab, 0xab, 0x0d, 0xa5, 0xc3, 0x38, 0x70, 0xe2, 0x72,
	0xf6, 0x47, 0xe8, 0x1f, 0xff, 0x2f, 0x1c, 0x82, 0xee, 0xad, 0xc3, 0x90, 0xb8, 0x8e, 0xf7, 0xc5,
	0xec, 0xe0, 0x08, 0x40, 0xc2, 0x59, 0xbc, 0x8c, 0x56, 0xa6, 0x76, 0x92, 0x97, 0xab, 0xb9, 0xd9,
	0xb5, 0x23, 0xd0, 0xdb, 0xa5, 0xe2, 0xff, 0x70, 0xed, 0x86, 0x41, 0xe4, 0x93, 0x24, 0xf6, 0x88,
	0x13, 0xde, 0xcd, 0x1d, 0xb3, 0x83, 0x37, 0xf0, 0x52, 0x91, 0xcb, 0x28, 0x20, 0x8b, 0xcf, 0xd1,
	0x3a, 0x39, 0x93, 0x65, 0x5f, 0x2b, 0x9b, 0x5d, 0xfb, 0x03, 0x0c, 0x1f, 0x6d, 0x19, 0x11, 0x46,
	0x4a, 0x9f, 0xad, 0x23, 0x8f, 0x38, 0xbe, 0x6f, 0x76, 0xfe, 0xe2, 0x16, 0xce, 0x77, 0x53, 0xb3,
	0x5d, 0xd0, 0xdb, 0xf5, 0xe0, 0x33, 0x30, 0xfd, 0xe0, 0x6e, 0x35, 0x27, 0x61, 0x90, 0x24, 0x24,
	0xf8, 0xba, 0x76, 0x42, 0xf5, 0x94, 0x13, 0x6b, 0x6a, 0x78, 0x0d, 0x86, 0xc2, 0xca, 0xd0, 0xdd,
	0xa8, 0xcf, 0xe6, 0xdd, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x77, 0xda, 0xfa, 0xc2, 0x4c, 0x03,
	0x00, 0x00,
}
