// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: model.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "model.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protos {

namespace {

const ::google::protobuf::Descriptor* Mesh_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Mesh_reflection_ = NULL;
const ::google::protobuf::Descriptor* Model_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Model_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_model_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_model_2eproto() {
  protobuf_AddDesc_model_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "model.proto");
  GOOGLE_CHECK(file != NULL);
  Mesh_descriptor_ = file->message_type(0);
  static const int Mesh_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mesh, indices_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mesh, positions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mesh, normals_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mesh, tangents_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mesh, bitangents_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mesh, tcoords_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mesh, albedo_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mesh, normal_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mesh, rough_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mesh, metal_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mesh, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mesh, name_),
  };
  Mesh_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Mesh_descriptor_,
      Mesh::internal_default_instance(),
      Mesh_offsets_,
      -1,
      -1,
      -1,
      sizeof(Mesh),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mesh, _internal_metadata_));
  Model_descriptor_ = file->message_type(1);
  static const int Model_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Model, meshes_),
  };
  Model_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Model_descriptor_,
      Model::internal_default_instance(),
      Model_offsets_,
      -1,
      -1,
      -1,
      sizeof(Model),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Model, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_model_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Mesh_descriptor_, Mesh::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Model_descriptor_, Model::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_model_2eproto() {
  Mesh_default_instance_.Shutdown();
  delete Mesh_reflection_;
  Model_default_instance_.Shutdown();
  delete Model_reflection_;
}

void protobuf_InitDefaults_model_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  Mesh_default_instance_.DefaultConstruct();
  Model_default_instance_.DefaultConstruct();
  Mesh_default_instance_.get_mutable()->InitAsDefaultInstance();
  Model_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_model_2eproto_once_);
void protobuf_InitDefaults_model_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_model_2eproto_once_,
                 &protobuf_InitDefaults_model_2eproto_impl);
}
void protobuf_AddDesc_model_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_model_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013model.proto\022\006protos\"\335\001\n\004Mesh\022\017\n\007indice"
    "s\030\001 \001(\014\022\021\n\tpositions\030\002 \001(\014\022\017\n\007normals\030\003 "
    "\001(\014\022\020\n\010tangents\030\004 \001(\014\022\022\n\nbitangents\030\005 \001("
    "\014\022\017\n\007tcoords\030\006 \001(\014\022\022\n\nalbedo_map\030\007 \001(\014\022\022"
    "\n\nnormal_map\030\010 \001(\014\022\021\n\trough_map\030\t \001(\014\022\021\n"
    "\tmetal_map\030\n \001(\014\022\r\n\005state\030\013 \001(\t\022\014\n\004name\030"
    "\014 \001(\t\"%\n\005Model\022\034\n\006meshes\030\001 \003(\0132\014.protos."
    "Meshb\006proto3", 292);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "model.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_model_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_model_2eproto_once_);
void protobuf_AddDesc_model_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_model_2eproto_once_,
                 &protobuf_AddDesc_model_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_model_2eproto {
  StaticDescriptorInitializer_model_2eproto() {
    protobuf_AddDesc_model_2eproto();
  }
} static_descriptor_initializer_model_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Mesh::kIndicesFieldNumber;
const int Mesh::kPositionsFieldNumber;
const int Mesh::kNormalsFieldNumber;
const int Mesh::kTangentsFieldNumber;
const int Mesh::kBitangentsFieldNumber;
const int Mesh::kTcoordsFieldNumber;
const int Mesh::kAlbedoMapFieldNumber;
const int Mesh::kNormalMapFieldNumber;
const int Mesh::kRoughMapFieldNumber;
const int Mesh::kMetalMapFieldNumber;
const int Mesh::kStateFieldNumber;
const int Mesh::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Mesh::Mesh()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_model_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:protos.Mesh)
}

void Mesh::InitAsDefaultInstance() {
}

Mesh::Mesh(const Mesh& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protos.Mesh)
}

void Mesh::SharedCtor() {
  indices_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  positions_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  normals_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tangents_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bitangents_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tcoords_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  albedo_map_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  normal_map_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rough_map_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metal_map_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

Mesh::~Mesh() {
  // @@protoc_insertion_point(destructor:protos.Mesh)
  SharedDtor();
}

void Mesh::SharedDtor() {
  indices_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  positions_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  normals_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tangents_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bitangents_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tcoords_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  albedo_map_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  normal_map_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rough_map_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metal_map_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Mesh::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Mesh::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Mesh_descriptor_;
}

const Mesh& Mesh::default_instance() {
  protobuf_InitDefaults_model_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Mesh> Mesh_default_instance_;

Mesh* Mesh::New(::google::protobuf::Arena* arena) const {
  Mesh* n = new Mesh;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Mesh::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.Mesh)
  indices_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  positions_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  normals_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tangents_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bitangents_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tcoords_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  albedo_map_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  normal_map_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rough_map_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metal_map_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Mesh::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protos.Mesh)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes indices = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_indices()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_positions;
        break;
      }

      // optional bytes positions = 2;
      case 2: {
        if (tag == 18) {
         parse_positions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_positions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_normals;
        break;
      }

      // optional bytes normals = 3;
      case 3: {
        if (tag == 26) {
         parse_normals:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_normals()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_tangents;
        break;
      }

      // optional bytes tangents = 4;
      case 4: {
        if (tag == 34) {
         parse_tangents:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_tangents()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_bitangents;
        break;
      }

      // optional bytes bitangents = 5;
      case 5: {
        if (tag == 42) {
         parse_bitangents:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bitangents()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_tcoords;
        break;
      }

      // optional bytes tcoords = 6;
      case 6: {
        if (tag == 50) {
         parse_tcoords:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_tcoords()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_albedo_map;
        break;
      }

      // optional bytes albedo_map = 7;
      case 7: {
        if (tag == 58) {
         parse_albedo_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_albedo_map()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_normal_map;
        break;
      }

      // optional bytes normal_map = 8;
      case 8: {
        if (tag == 66) {
         parse_normal_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_normal_map()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_rough_map;
        break;
      }

      // optional bytes rough_map = 9;
      case 9: {
        if (tag == 74) {
         parse_rough_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_rough_map()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_metal_map;
        break;
      }

      // optional bytes metal_map = 10;
      case 10: {
        if (tag == 82) {
         parse_metal_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_metal_map()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_state;
        break;
      }

      // optional string state = 11;
      case 11: {
        if (tag == 90) {
         parse_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_state()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->state().data(), this->state().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protos.Mesh.state"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_name;
        break;
      }

      // optional string name = 12;
      case 12: {
        if (tag == 98) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protos.Mesh.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protos.Mesh)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protos.Mesh)
  return false;
#undef DO_
}

void Mesh::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protos.Mesh)
  // optional bytes indices = 1;
  if (this->indices().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->indices(), output);
  }

  // optional bytes positions = 2;
  if (this->positions().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->positions(), output);
  }

  // optional bytes normals = 3;
  if (this->normals().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->normals(), output);
  }

  // optional bytes tangents = 4;
  if (this->tangents().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->tangents(), output);
  }

  // optional bytes bitangents = 5;
  if (this->bitangents().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->bitangents(), output);
  }

  // optional bytes tcoords = 6;
  if (this->tcoords().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->tcoords(), output);
  }

  // optional bytes albedo_map = 7;
  if (this->albedo_map().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->albedo_map(), output);
  }

  // optional bytes normal_map = 8;
  if (this->normal_map().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->normal_map(), output);
  }

  // optional bytes rough_map = 9;
  if (this->rough_map().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->rough_map(), output);
  }

  // optional bytes metal_map = 10;
  if (this->metal_map().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      10, this->metal_map(), output);
  }

  // optional string state = 11;
  if (this->state().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->state().data(), this->state().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protos.Mesh.state");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->state(), output);
  }

  // optional string name = 12;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protos.Mesh.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->name(), output);
  }

  // @@protoc_insertion_point(serialize_end:protos.Mesh)
}

::google::protobuf::uint8* Mesh::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protos.Mesh)
  // optional bytes indices = 1;
  if (this->indices().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->indices(), target);
  }

  // optional bytes positions = 2;
  if (this->positions().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->positions(), target);
  }

  // optional bytes normals = 3;
  if (this->normals().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->normals(), target);
  }

  // optional bytes tangents = 4;
  if (this->tangents().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->tangents(), target);
  }

  // optional bytes bitangents = 5;
  if (this->bitangents().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->bitangents(), target);
  }

  // optional bytes tcoords = 6;
  if (this->tcoords().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->tcoords(), target);
  }

  // optional bytes albedo_map = 7;
  if (this->albedo_map().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->albedo_map(), target);
  }

  // optional bytes normal_map = 8;
  if (this->normal_map().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->normal_map(), target);
  }

  // optional bytes rough_map = 9;
  if (this->rough_map().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->rough_map(), target);
  }

  // optional bytes metal_map = 10;
  if (this->metal_map().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->metal_map(), target);
  }

  // optional string state = 11;
  if (this->state().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->state().data(), this->state().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protos.Mesh.state");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->state(), target);
  }

  // optional string name = 12;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protos.Mesh.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:protos.Mesh)
  return target;
}

size_t Mesh::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protos.Mesh)
  size_t total_size = 0;

  // optional bytes indices = 1;
  if (this->indices().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->indices());
  }

  // optional bytes positions = 2;
  if (this->positions().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->positions());
  }

  // optional bytes normals = 3;
  if (this->normals().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->normals());
  }

  // optional bytes tangents = 4;
  if (this->tangents().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->tangents());
  }

  // optional bytes bitangents = 5;
  if (this->bitangents().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->bitangents());
  }

  // optional bytes tcoords = 6;
  if (this->tcoords().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->tcoords());
  }

  // optional bytes albedo_map = 7;
  if (this->albedo_map().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->albedo_map());
  }

  // optional bytes normal_map = 8;
  if (this->normal_map().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->normal_map());
  }

  // optional bytes rough_map = 9;
  if (this->rough_map().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->rough_map());
  }

  // optional bytes metal_map = 10;
  if (this->metal_map().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->metal_map());
  }

  // optional string state = 11;
  if (this->state().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->state());
  }

  // optional string name = 12;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Mesh::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protos.Mesh)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Mesh* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Mesh>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protos.Mesh)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protos.Mesh)
    UnsafeMergeFrom(*source);
  }
}

void Mesh::MergeFrom(const Mesh& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protos.Mesh)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Mesh::UnsafeMergeFrom(const Mesh& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.indices().size() > 0) {

    indices_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.indices_);
  }
  if (from.positions().size() > 0) {

    positions_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.positions_);
  }
  if (from.normals().size() > 0) {

    normals_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.normals_);
  }
  if (from.tangents().size() > 0) {

    tangents_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tangents_);
  }
  if (from.bitangents().size() > 0) {

    bitangents_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bitangents_);
  }
  if (from.tcoords().size() > 0) {

    tcoords_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tcoords_);
  }
  if (from.albedo_map().size() > 0) {

    albedo_map_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.albedo_map_);
  }
  if (from.normal_map().size() > 0) {

    normal_map_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.normal_map_);
  }
  if (from.rough_map().size() > 0) {

    rough_map_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rough_map_);
  }
  if (from.metal_map().size() > 0) {

    metal_map_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.metal_map_);
  }
  if (from.state().size() > 0) {

    state_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.state_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void Mesh::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protos.Mesh)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mesh::CopyFrom(const Mesh& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.Mesh)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Mesh::IsInitialized() const {

  return true;
}

void Mesh::Swap(Mesh* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Mesh::InternalSwap(Mesh* other) {
  indices_.Swap(&other->indices_);
  positions_.Swap(&other->positions_);
  normals_.Swap(&other->normals_);
  tangents_.Swap(&other->tangents_);
  bitangents_.Swap(&other->bitangents_);
  tcoords_.Swap(&other->tcoords_);
  albedo_map_.Swap(&other->albedo_map_);
  normal_map_.Swap(&other->normal_map_);
  rough_map_.Swap(&other->rough_map_);
  metal_map_.Swap(&other->metal_map_);
  state_.Swap(&other->state_);
  name_.Swap(&other->name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Mesh::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Mesh_descriptor_;
  metadata.reflection = Mesh_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Mesh

// optional bytes indices = 1;
void Mesh::clear_indices() {
  indices_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Mesh::indices() const {
  // @@protoc_insertion_point(field_get:protos.Mesh.indices)
  return indices_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Mesh::set_indices(const ::std::string& value) {
  
  indices_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protos.Mesh.indices)
}
void Mesh::set_indices(const char* value) {
  
  indices_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protos.Mesh.indices)
}
void Mesh::set_indices(const void* value, size_t size) {
  
  indices_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protos.Mesh.indices)
}
::std::string* Mesh::mutable_indices() {
  
  // @@protoc_insertion_point(field_mutable:protos.Mesh.indices)
  return indices_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Mesh::release_indices() {
  // @@protoc_insertion_point(field_release:protos.Mesh.indices)
  
  return indices_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Mesh::set_allocated_indices(::std::string* indices) {
  if (indices != NULL) {
    
  } else {
    
  }
  indices_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), indices);
  // @@protoc_insertion_point(field_set_allocated:protos.Mesh.indices)
}

// optional bytes positions = 2;
void Mesh::clear_positions() {
  positions_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Mesh::positions() const {
  // @@protoc_insertion_point(field_get:protos.Mesh.positions)
  return positions_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Mesh::set_positions(const ::std::string& value) {
  
  positions_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protos.Mesh.positions)
}
void Mesh::set_positions(const char* value) {
  
  positions_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protos.Mesh.positions)
}
void Mesh::set_positions(const void* value, size_t size) {
  
  positions_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protos.Mesh.positions)
}
::std::string* Mesh::mutable_positions() {
  
  // @@protoc_insertion_point(field_mutable:protos.Mesh.positions)
  return positions_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Mesh::release_positions() {
  // @@protoc_insertion_point(field_release:protos.Mesh.positions)
  
  return positions_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Mesh::set_allocated_positions(::std::string* positions) {
  if (positions != NULL) {
    
  } else {
    
  }
  positions_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), positions);
  // @@protoc_insertion_point(field_set_allocated:protos.Mesh.positions)
}

// optional bytes normals = 3;
void Mesh::clear_normals() {
  normals_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Mesh::normals() const {
  // @@protoc_insertion_point(field_get:protos.Mesh.normals)
  return normals_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Mesh::set_normals(const ::std::string& value) {
  
  normals_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protos.Mesh.normals)
}
void Mesh::set_normals(const char* value) {
  
  normals_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protos.Mesh.normals)
}
void Mesh::set_normals(const void* value, size_t size) {
  
  normals_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protos.Mesh.normals)
}
::std::string* Mesh::mutable_normals() {
  
  // @@protoc_insertion_point(field_mutable:protos.Mesh.normals)
  return normals_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Mesh::release_normals() {
  // @@protoc_insertion_point(field_release:protos.Mesh.normals)
  
  return normals_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Mesh::set_allocated_normals(::std::string* normals) {
  if (normals != NULL) {
    
  } else {
    
  }
  normals_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), normals);
  // @@protoc_insertion_point(field_set_allocated:protos.Mesh.normals)
}

// optional bytes tangents = 4;
void Mesh::clear_tangents() {
  tangents_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Mesh::tangents() const {
  // @@protoc_insertion_point(field_get:protos.Mesh.tangents)
  return tangents_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Mesh::set_tangents(const ::std::string& value) {
  
  tangents_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protos.Mesh.tangents)
}
void Mesh::set_tangents(const char* value) {
  
  tangents_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protos.Mesh.tangents)
}
void Mesh::set_tangents(const void* value, size_t size) {
  
  tangents_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protos.Mesh.tangents)
}
::std::string* Mesh::mutable_tangents() {
  
  // @@protoc_insertion_point(field_mutable:protos.Mesh.tangents)
  return tangents_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Mesh::release_tangents() {
  // @@protoc_insertion_point(field_release:protos.Mesh.tangents)
  
  return tangents_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Mesh::set_allocated_tangents(::std::string* tangents) {
  if (tangents != NULL) {
    
  } else {
    
  }
  tangents_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tangents);
  // @@protoc_insertion_point(field_set_allocated:protos.Mesh.tangents)
}

// optional bytes bitangents = 5;
void Mesh::clear_bitangents() {
  bitangents_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Mesh::bitangents() const {
  // @@protoc_insertion_point(field_get:protos.Mesh.bitangents)
  return bitangents_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Mesh::set_bitangents(const ::std::string& value) {
  
  bitangents_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protos.Mesh.bitangents)
}
void Mesh::set_bitangents(const char* value) {
  
  bitangents_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protos.Mesh.bitangents)
}
void Mesh::set_bitangents(const void* value, size_t size) {
  
  bitangents_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protos.Mesh.bitangents)
}
::std::string* Mesh::mutable_bitangents() {
  
  // @@protoc_insertion_point(field_mutable:protos.Mesh.bitangents)
  return bitangents_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Mesh::release_bitangents() {
  // @@protoc_insertion_point(field_release:protos.Mesh.bitangents)
  
  return bitangents_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Mesh::set_allocated_bitangents(::std::string* bitangents) {
  if (bitangents != NULL) {
    
  } else {
    
  }
  bitangents_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bitangents);
  // @@protoc_insertion_point(field_set_allocated:protos.Mesh.bitangents)
}

// optional bytes tcoords = 6;
void Mesh::clear_tcoords() {
  tcoords_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Mesh::tcoords() const {
  // @@protoc_insertion_point(field_get:protos.Mesh.tcoords)
  return tcoords_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Mesh::set_tcoords(const ::std::string& value) {
  
  tcoords_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protos.Mesh.tcoords)
}
void Mesh::set_tcoords(const char* value) {
  
  tcoords_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protos.Mesh.tcoords)
}
void Mesh::set_tcoords(const void* value, size_t size) {
  
  tcoords_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protos.Mesh.tcoords)
}
::std::string* Mesh::mutable_tcoords() {
  
  // @@protoc_insertion_point(field_mutable:protos.Mesh.tcoords)
  return tcoords_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Mesh::release_tcoords() {
  // @@protoc_insertion_point(field_release:protos.Mesh.tcoords)
  
  return tcoords_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Mesh::set_allocated_tcoords(::std::string* tcoords) {
  if (tcoords != NULL) {
    
  } else {
    
  }
  tcoords_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tcoords);
  // @@protoc_insertion_point(field_set_allocated:protos.Mesh.tcoords)
}

// optional bytes albedo_map = 7;
void Mesh::clear_albedo_map() {
  albedo_map_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Mesh::albedo_map() const {
  // @@protoc_insertion_point(field_get:protos.Mesh.albedo_map)
  return albedo_map_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Mesh::set_albedo_map(const ::std::string& value) {
  
  albedo_map_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protos.Mesh.albedo_map)
}
void Mesh::set_albedo_map(const char* value) {
  
  albedo_map_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protos.Mesh.albedo_map)
}
void Mesh::set_albedo_map(const void* value, size_t size) {
  
  albedo_map_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protos.Mesh.albedo_map)
}
::std::string* Mesh::mutable_albedo_map() {
  
  // @@protoc_insertion_point(field_mutable:protos.Mesh.albedo_map)
  return albedo_map_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Mesh::release_albedo_map() {
  // @@protoc_insertion_point(field_release:protos.Mesh.albedo_map)
  
  return albedo_map_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Mesh::set_allocated_albedo_map(::std::string* albedo_map) {
  if (albedo_map != NULL) {
    
  } else {
    
  }
  albedo_map_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), albedo_map);
  // @@protoc_insertion_point(field_set_allocated:protos.Mesh.albedo_map)
}

// optional bytes normal_map = 8;
void Mesh::clear_normal_map() {
  normal_map_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Mesh::normal_map() const {
  // @@protoc_insertion_point(field_get:protos.Mesh.normal_map)
  return normal_map_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Mesh::set_normal_map(const ::std::string& value) {
  
  normal_map_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protos.Mesh.normal_map)
}
void Mesh::set_normal_map(const char* value) {
  
  normal_map_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protos.Mesh.normal_map)
}
void Mesh::set_normal_map(const void* value, size_t size) {
  
  normal_map_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protos.Mesh.normal_map)
}
::std::string* Mesh::mutable_normal_map() {
  
  // @@protoc_insertion_point(field_mutable:protos.Mesh.normal_map)
  return normal_map_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Mesh::release_normal_map() {
  // @@protoc_insertion_point(field_release:protos.Mesh.normal_map)
  
  return normal_map_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Mesh::set_allocated_normal_map(::std::string* normal_map) {
  if (normal_map != NULL) {
    
  } else {
    
  }
  normal_map_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), normal_map);
  // @@protoc_insertion_point(field_set_allocated:protos.Mesh.normal_map)
}

// optional bytes rough_map = 9;
void Mesh::clear_rough_map() {
  rough_map_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Mesh::rough_map() const {
  // @@protoc_insertion_point(field_get:protos.Mesh.rough_map)
  return rough_map_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Mesh::set_rough_map(const ::std::string& value) {
  
  rough_map_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protos.Mesh.rough_map)
}
void Mesh::set_rough_map(const char* value) {
  
  rough_map_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protos.Mesh.rough_map)
}
void Mesh::set_rough_map(const void* value, size_t size) {
  
  rough_map_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protos.Mesh.rough_map)
}
::std::string* Mesh::mutable_rough_map() {
  
  // @@protoc_insertion_point(field_mutable:protos.Mesh.rough_map)
  return rough_map_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Mesh::release_rough_map() {
  // @@protoc_insertion_point(field_release:protos.Mesh.rough_map)
  
  return rough_map_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Mesh::set_allocated_rough_map(::std::string* rough_map) {
  if (rough_map != NULL) {
    
  } else {
    
  }
  rough_map_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rough_map);
  // @@protoc_insertion_point(field_set_allocated:protos.Mesh.rough_map)
}

// optional bytes metal_map = 10;
void Mesh::clear_metal_map() {
  metal_map_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Mesh::metal_map() const {
  // @@protoc_insertion_point(field_get:protos.Mesh.metal_map)
  return metal_map_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Mesh::set_metal_map(const ::std::string& value) {
  
  metal_map_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protos.Mesh.metal_map)
}
void Mesh::set_metal_map(const char* value) {
  
  metal_map_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protos.Mesh.metal_map)
}
void Mesh::set_metal_map(const void* value, size_t size) {
  
  metal_map_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protos.Mesh.metal_map)
}
::std::string* Mesh::mutable_metal_map() {
  
  // @@protoc_insertion_point(field_mutable:protos.Mesh.metal_map)
  return metal_map_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Mesh::release_metal_map() {
  // @@protoc_insertion_point(field_release:protos.Mesh.metal_map)
  
  return metal_map_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Mesh::set_allocated_metal_map(::std::string* metal_map) {
  if (metal_map != NULL) {
    
  } else {
    
  }
  metal_map_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), metal_map);
  // @@protoc_insertion_point(field_set_allocated:protos.Mesh.metal_map)
}

// optional string state = 11;
void Mesh::clear_state() {
  state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Mesh::state() const {
  // @@protoc_insertion_point(field_get:protos.Mesh.state)
  return state_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Mesh::set_state(const ::std::string& value) {
  
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protos.Mesh.state)
}
void Mesh::set_state(const char* value) {
  
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protos.Mesh.state)
}
void Mesh::set_state(const char* value, size_t size) {
  
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protos.Mesh.state)
}
::std::string* Mesh::mutable_state() {
  
  // @@protoc_insertion_point(field_mutable:protos.Mesh.state)
  return state_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Mesh::release_state() {
  // @@protoc_insertion_point(field_release:protos.Mesh.state)
  
  return state_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Mesh::set_allocated_state(::std::string* state) {
  if (state != NULL) {
    
  } else {
    
  }
  state_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), state);
  // @@protoc_insertion_point(field_set_allocated:protos.Mesh.state)
}

// optional string name = 12;
void Mesh::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Mesh::name() const {
  // @@protoc_insertion_point(field_get:protos.Mesh.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Mesh::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protos.Mesh.name)
}
void Mesh::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protos.Mesh.name)
}
void Mesh::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protos.Mesh.name)
}
::std::string* Mesh::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:protos.Mesh.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Mesh::release_name() {
  // @@protoc_insertion_point(field_release:protos.Mesh.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Mesh::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:protos.Mesh.name)
}

inline const Mesh* Mesh::internal_default_instance() {
  return &Mesh_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Model::kMeshesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Model::Model()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_model_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:protos.Model)
}

void Model::InitAsDefaultInstance() {
}

Model::Model(const Model& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protos.Model)
}

void Model::SharedCtor() {
  _cached_size_ = 0;
}

Model::~Model() {
  // @@protoc_insertion_point(destructor:protos.Model)
  SharedDtor();
}

void Model::SharedDtor() {
}

void Model::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Model::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Model_descriptor_;
}

const Model& Model::default_instance() {
  protobuf_InitDefaults_model_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Model> Model_default_instance_;

Model* Model::New(::google::protobuf::Arena* arena) const {
  Model* n = new Model;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Model::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.Model)
  meshes_.Clear();
}

bool Model::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protos.Model)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protos.Mesh meshes = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_meshes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_meshes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_meshes;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protos.Model)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protos.Model)
  return false;
#undef DO_
}

void Model::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protos.Model)
  // repeated .protos.Mesh meshes = 1;
  for (unsigned int i = 0, n = this->meshes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->meshes(i), output);
  }

  // @@protoc_insertion_point(serialize_end:protos.Model)
}

::google::protobuf::uint8* Model::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protos.Model)
  // repeated .protos.Mesh meshes = 1;
  for (unsigned int i = 0, n = this->meshes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->meshes(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:protos.Model)
  return target;
}

size_t Model::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protos.Model)
  size_t total_size = 0;

  // repeated .protos.Mesh meshes = 1;
  {
    unsigned int count = this->meshes_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->meshes(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Model::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protos.Model)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Model* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Model>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protos.Model)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protos.Model)
    UnsafeMergeFrom(*source);
  }
}

void Model::MergeFrom(const Model& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protos.Model)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Model::UnsafeMergeFrom(const Model& from) {
  GOOGLE_DCHECK(&from != this);
  meshes_.MergeFrom(from.meshes_);
}

void Model::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protos.Model)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Model::CopyFrom(const Model& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.Model)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Model::IsInitialized() const {

  return true;
}

void Model::Swap(Model* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Model::InternalSwap(Model* other) {
  meshes_.UnsafeArenaSwap(&other->meshes_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Model::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Model_descriptor_;
  metadata.reflection = Model_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Model

// repeated .protos.Mesh meshes = 1;
int Model::meshes_size() const {
  return meshes_.size();
}
void Model::clear_meshes() {
  meshes_.Clear();
}
const ::protos::Mesh& Model::meshes(int index) const {
  // @@protoc_insertion_point(field_get:protos.Model.meshes)
  return meshes_.Get(index);
}
::protos::Mesh* Model::mutable_meshes(int index) {
  // @@protoc_insertion_point(field_mutable:protos.Model.meshes)
  return meshes_.Mutable(index);
}
::protos::Mesh* Model::add_meshes() {
  // @@protoc_insertion_point(field_add:protos.Model.meshes)
  return meshes_.Add();
}
::google::protobuf::RepeatedPtrField< ::protos::Mesh >*
Model::mutable_meshes() {
  // @@protoc_insertion_point(field_mutable_list:protos.Model.meshes)
  return &meshes_;
}
const ::google::protobuf::RepeatedPtrField< ::protos::Mesh >&
Model::meshes() const {
  // @@protoc_insertion_point(field_list:protos.Model.meshes)
  return meshes_;
}

inline const Model* Model::internal_default_instance() {
  return &Model_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace protos

// @@protoc_insertion_point(global_scope)
